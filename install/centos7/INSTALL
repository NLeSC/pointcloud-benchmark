HOW TO INSTALL POSTGRESL POINT CLOUD EXTENSION (AND LIBLAS AND PDAL) in CENTOS7
###################################################################################
ALSO MONETDB and LASTOOLS
#########################

# NOT FINISHED YET

yum update
yum install wget cmake make CUnit-devel autoconf automake gcc cpp gcc-c++ \
python-devel swig sudo yum install libjpeg-turbo-devel bzip2-devel zlib-devel \
git libxml2-devel numpy flann flann-devel sqlite sqlite-devel openmpi-devel \
subversion expat-devel libcurl-devel xerces-c-devel unixODBC-devel json-c-devel \
pcre pcre-devel ant bison bison-devel openssl openssl-devel gettext-devel libtool \
hg readline readline-devel unixODBC unixODBC-devel unzip 
 
touch /opt/sw/export.sh

# GEOS
wget http://download.osgeo.org/geos/geos-3.4.2.tar.bz2
tar xjf geos-3.4.2.tar.bz2 
cd geos-3.4.2
mkdir build
mkdir makefiles
cd makefiles
../configure --prefix=/opt/sw/geos-3.4.2/build --enable-python
make -j32
make install
cd /opt/sw/
vim export.sh
# Add to paths
# export LD_LIBRARY_PATH="/opt/sw/geos-3.4.2/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/geos-3.4.2/build/bin:$PATH"
source export.sh 
geos-config --version

# PROJ.4
wget http://download.osgeo.org/proj/proj-4.8.0.tar.gz
tar xvfz proj-4.8.0.tar.gz 
cd proj-4.8.0
mkdir build
./configure --prefix=/opt/sw/proj-4.8.0/build
make -j32
make install
cd /opt/sw/
vim export.sh
# Add to paths 
# export LD_LIBRARY_PATH="/opt/sw/proj-4.8.0/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/proj-4.8.0/build/bin:$PATH"
source export.sh 
proj
echo "338730 4679730" | cs2cs -v +init=epsg:26919 +to +init=epsg:4269

# TIFF 
wget http://download.osgeo.org/libtiff/tiff-4.0.3.tar.gz
tar xvzf tiff-4.0.3.tar.gz 
cd tiff-4.0.3
mkdir makefiles
cd makefiles/
../configure --prefix=/opt/sw/tiff-4.0.3/build --exec-prefix=/opt/sw/tiff-4.0.3/build/
make -j32
make install
cd /opt/sw/
vim export.sh
# Add to paths 
# export LD_LIBRARY_PATH="/opt/sw/tiff-4.0.3/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/tiff-4.0.3/build/bin:$PATH"

# GEOTIFF
source export.sh 
wget wget http://download.osgeo.org/geotiff/libgeotiff/libgeotiff-1.4.1.tar.gz
tar xvzf libgeotiff-1.4.1.tar.gz 
cd libgeotiff-1.4.1
mkdir build
./configure --prefix=/opt/sw/libgeotiff-1.4.1/build --with-proj=/opt/sw/proj-4.8.0/build --with-libtiff=/opt/sw/tiff-4.0.3/build --with-zlib --with-jpeg
make -j32
make install
cd /opt/sw/
vim export.sh 
# export LD_LIBRARY_PATH="/opt/sw/libgeotiff-1.4.1/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/libgeotiff-1.4.1/build/bin:$PATH"

# BOOST  
# IMPORTANT: PDAL requires version 1.55 and not higher!. PDAL did not compile with Boost 1.57 
source export_custom.sh 
wget http://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2
tar xvjf boost_1_55_0.tar.bz2 
cd boost_1_55_0
mkdir build
./bootstrap.sh --prefix=/opt/sw/boost_1_55_0/build
./b2 -j32 stage threading=multi --layout=tagged link=shared
./b2 install
cd /opt/sw/
# Add paths to export.sh 
# export LD_LIBRARY_PATH="/opt/sw/boost_1_55_0/build/lib:$LD_LIBRARY_PATH"

# POSTGRESQL
wget https://ftp.postgresql.org/pub/source/v9.4.1/postgresql-9.4.1.tar.gz
tar xvzf postgresql-9.4.1.tar.gz 
cd postgresql-9.4.1
mkdir build
mkdir makefiles
cd makefiles/
../configure --prefix=/opt/sw/postgresql-9.4.1/build
make -j32
make install
# Add to paths
# export LD_LIBRARY_PATH="/opt/sw/postgresql-9.4.1/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/postgresql-9.4.1/build/bin:$PATH"
# export CPATH="/opt/sw/postgresql-9.4.1/build/include:$CPATH"

# GDAL
cd /opt/sw/
source export.sh 
svn checkout https://svn.osgeo.org/gdal/trunk/gdal gdal-trunk
cd gdal-trunk/
mkdir build
export CC="gcc -fPIC"
export CXX="g++ -fPIC"
./configure --prefix=/opt/sw/gdal-trunk/build/ --with-jpeg=external --with-jpeg12 --without-libtool --without-python --with-static-proj4=/opt/sw/proj-4.8.0/build/ --with-libtiff=/opt/sw/tiff-4.0.3/build/ --with-geotiff=/opt/sw/libgeotiff-1.4.1/build/ --with-geos=/opt/sw/geos-3.4.2/build/bin/geos-config --with-pg=/opt/sw/postgresql-9.4.1/build/bin/pg_config
make -j32
make install
cd /opt/sw/
vim export.sh 
# Add to paths
# export LD_LIBRARY_PATH="/opt/sw/gdal-trunk/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/gdal-trunk/build/bin:$PATH"
# export PATH="/opt/sw/gdal-trunk/swig/python/scripts:$PATH"
source export.sh 
gdal-config --version
gdal-config --formats
gdal-config --ogr-enabled
gdalinfo --formats
ogrinfo --formats
mkdir -p /opt/sw/gdal-trunk/build/lib64/python2.7/site-packages
export PYTHONPATH="$PYTHONPATH:/opt/sw/gdal-trunk/build/lib64/python2.7/site-packages"
cd gdal-trunk/swig/
make -j32
cd python/
python setup.py install --prefix=/opt/sw/gdal-trunk/build
cd /opt/sw
vim export.sh
# Add to paths 
# export PYTHONPATH="$PYTHONPATH:/opt/sw/gdal-trunk/build/lib64/python2.7/site-packages"
source export.sh 
python -c 'import osgeo.gdal; print osgeo.gdal.__version__; print osgeo.gdal.__file__'
gdal_merge.py --version

# LASZIP
source export_custom.sh 
install git cmake gcc-c++ make
wget http://download.A.org/laszip/laszip-2.1.0.tar.gz
tar xvzf laszip-2.1.0.tar.gz 
cd laszip-2.1.0
mkdir build
mkdir makefiles
cd makefiles/
cmake .. -DCMAKE_INSTALL_PREFIX=/opt/sw/laszip-2.1.0/build/
make
make install
cd /opt/sw/
# Add paths to export.sh 
# export LD_LIBRARY_PATH="/opt/sw/laszip-2.1.0/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/laszip-2.1.0/build/bin:$PATH"

# LIBLAS
source export_custom.sh 
git clone git://github.com/libLAS/libLAS.git liblas
cd liblas/
cd makefiles/
# The FindPROJ4.cmake is missing. It has to be put in /opt/sw/liblas/cmake/modules
# Use file in this directory
cmake -G "Unix Makefiles" .. -DCMAKE_INSTALL_PREFIX=/opt/sw/liblas/build -DWITH_GDAL=ON  -DWITH_GEOTIFF=ON -DWITH_LASZIP=ON -DWITH_PKGCONFIG=ON -DWITH_TESTS=ON -DGDAL_CONFIG=/opt/sw/gdal-trunk/build/bin/gdal-config -DGDAL_INCLUDE_DIR=/opt/sw/gdal-trunk/build/include -DGDAL_LIBRARY=/opt/sw/gdal-trunk/build/lib/libgdal.so -DGEOTIFF_INCLUDE_DIR=/opt/sw/libgeotiff-1.4.1/build/include -DGEOTIFF_LIBRARY=/opt/sw/libgeotiff-1.4.1/build/lib/libgeotiff.so -DLASZIP_INCLUDE_DIR=/opt/sw/laszip-2.1.0/build/include -DLASZIP_LIBRARY=/opt/sw/laszip-2.1.0/build/lib/liblaszip.so -DTIFF_INCLUDE_DIR=/opt/sw/tiff-4.0.3/build/include -DTIFF_LIBRARY=/opt/sw/tiff-4.0.3/build/lib/libtiff.so -DPROJ4_LIBRARY=/opt/sw/proj-4.8.0/build/lib/libproj.so -DPROJ4_INCLUDE_DIR=/opt/sw/proj-4.8.0/build/include -DBOOST_LIBRARY_DIRS=/opt/sw/boost_1_55_0/build/lib -DBOOST_INCLUDEDIR=/opt/sw/boost_1_55_0/build/include -DBOOST_PROGRAM_OPTIONS_LIBRARY=/opt/sw/boost_1_55_0/build/lib/libboost_program_options.so -DBOOST_PROGRAM_OPTIONS_LIBRARY_DEBUG=/opt/sw/boost_1_55_0/build/lib/libboost_program_options.so -DBOOST_PROGRAM_OPTIONS_LIBRARY_RELEASE=/opt/sw/boost_1_55_0/build/lib/libboost_program_options.so -DBOOST_THREAD_LIBRARY=/opt/sw/boost_1_55_0/build/lib/libboost_thread.so -DBOOST_THREAD_LIBRARY_DEBUG=/opt/sw/boost_1_55_0/build/lib/libboost_thread.so -DBOOST_THREAD_LIBRARY_RELEASE=/opt/sw/boost_1_55_0/build/lib/libboost_thread.so
make -j32
make install
cd /opt/sw/
vim export.sh 
# Add to paths
# export LD_LIBRARY_PATH="/opt/sw/liblas/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/liblas/build/bin:$PATH"
# export CPATH="/opt/sw/liblas/build/include:$CPATH"
source export.sh 
lasinfo 
cd liblas/python/
mkdir -p /opt/sw/liblas/build/lib/python2.7/site-packages
export PYTHONPATH="$PYTHONPATH:/opt/sw/liblas/build/lib/python2.7/site-packages"
python setup.py install --prefix=/opt/sw/liblas/build
cd /opt/sw/
vim export.sh 
# Add to paths
# export PYTHONPATH="$PYTHONPATH:/opt/sw/liblas/build/lib/python2.7/site-packages"
source export.sh 
python -c 'import liblas; print liblas.__file__'

# POSTGIS
wget http://download.osgeo.org/postgis/source/postgis-2.1.5.tar.gz
tar xvzf postgis-2.1.5.tar.gz 
cd postgis-2.1.5
mkdir build
./configure --prefix=/opt/sw/postgis-2.1.5/build --with-pgconfig=/opt/sw/postgresql-9.4.1/build/bin/pg_config --with-geosconfig=/opt/sw/geos-3.4.2/build/bin/geos-config --with-projdir=/opt/sw/proj-4.8.0/build/ --with-gdalconfig=/opt/sw/gdal-trunk/build/bin/gdal-config 
make -j32
make install
cd /opt/sw/
vim export.sh 
# Add to paths
# export LD_LIBRARY_PATH="/opt/sw/postgis-2.1.5/build/lib:$LD_LIBRARY_PATH"
# export CPATH="/opt/sw/postgis-2.1.5/build/include:$CPATH"
source export.sh 

# PDAL
git clone https://github.com/PDAL/PDAL.git PDAL-trunk
cd PDAL-trunk
mkdir build
mkdir makefiles
cd makefiles
cmake .. -DCMAKE_INSTALL_PREFIX=/opt/sw/PDAL-trunk/build -DCMAKE_BUILD_TYPE=Release -DWITH_APPS=ON -DWITH_GEOTIFF=ON -DWITH_LASZIP=ON -DWITH_TESTS=ON -DGDAL_CONFIG=/opt/sw/gdal-trunk/build/bin/gdal-config -DGDAL_INCLUDE_DIR=/opt/sw/gdal-trunk/build/include -DGDAL_LIBRARY=/opt/sw/gdal-trunk/build/lib/libgdal.so -DGEOTIFF_INCLUDE_DIR=/opt/sw/libgeotiff-1.4.1/build/include -DGEOTIFF_LIBRARY=/opt/sw/libgeotiff-1.4.1/build/lib/libgeotiff.so -DLASZIP_INCLUDE_DIR=/opt/sw/laszip-2.1.0/build/include -DLASZIP_LIBRARY=/opt/sw/laszip-2.1.0/build/lib/liblaszip.so -DPG_CONFIG=/opt/sw/postgresql-9.4.1/build/bin/pg_config -DPOSTGRESQL_INCLUDE_DIR=/opt/sw/postgresql-9.4.1/build/include -DPOSTGRESQL_LIBRARIES=/opt/sw/postgresql-9.4.1/build/lib/libpq.so -DBoost_FILESYSTEM_LIBRARY=/opt/sw/boost_1_55_0/build/lib/libboost_filesystem.so -DBoost_FILESYSTEM_LIBRARY_DEBUG=/opt/sw/boost_1_55_0/build/lib/libboost_filesystem.so -DBoost_FILESYSTEM_LIBRARY_RELEASE=/opt/sw/boost_1_55_0/build/lib/libboost_filesystem.so -DBoost_INCLUDE_DIR=/opt/sw/boost_1_55_0/build/include -DBoost_IOSTREAMS_LIBRARY=/opt/sw/boost_1_55_0/build/lib/libboost_iostreams.so -DBoost_IOSTREAMS_LIBRARY_DEBUG=/opt/sw/boost_1_55_0/build/lib/libboost_iostreams.so -DBoost_IOSTREAMS_LIBRARY_RELEASE=/opt/sw/boost_1_55_0/build/lib/libboost_iostreams.so -DBoost_LIBRARY_DIRS=/opt/sw/boost_1_55_0/build/lib -DBoost_PROGRAM_OPTIONS_LIBRARY=/opt/sw/boost_1_55_0/build/lib/libboost_program_options.so -DBoost_PROGRAM_OPTIONS_LIBRARY_RELEASE=/opt/sw/boost_1_55_0/build/lib/libboost_program_options.so -DBoost_PROGRAM_OPTIONS_LIBRARY_DEBUG=/opt/sw/boost_1_55_0/build/lib/libboost_program_options.so -DBoost_SYSTEM_LIBRARY=/opt/sw/boost_1_55_0/build/lib/libboost_system.so -DBoost_SYSTEM_LIBRARY_DEBUG=/opt/sw/boost_1_55_0/build/lib/libboost_system.so -DBoost_SYSTEM_LIBRARY_RELEASE=/opt/sw/boost_1_55_0/build/lib/libboost_system.so -DCMAKE_CXX_FLAGS="-std=c++11"
make -j32
make install
cd /opt/sw/
vim export.sh 
# Add to apths
# export LD_LIBRARY_PATH="/opt/sw/PDAL-trunk/build/lib:$LD_LIBRARY_PATH"
# export PATH="/opt/sw/PDAL-trunk/build/bin:$PATH"
source export.sh 
pdal

# POSTGRESQL PC
git clone https://github.com/pramsey/pointcloud.git
cd pointcloud/
export PATH=$PATH:/opt/sw/postgresql-9.4.1/build/bin
./autogen.sh 
CFLAGS=-fpic ./configure
make -j32
make install

# LASTOOLS
# For Wine (required for LASTools windows executables) and also other python packages for the benchmark platform we need EPEL
yum install http://mirror.its.dal.ca/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
cd /opt/sw
wget http://www.cs.unc.edu/~isenburg/lastools/download/lastools.zip
unzip lastools.zip
cd lastools
make -j$threads
# Binaries will be found in the 'bin' directory. 
# Recommended not to run 'make install' because most of lastools' executables have the same names as the liblas utilities. 
# Add to paths
# export PATH="/opt/sw/LAStools/bin:$PATH"
sudo yum install wine
cd /opt/sw/LAStools/bin
chmod +x *.exe
    
# THIS WINE DOES NOT WORK
# TRY http://www.tecmint.com/install-wine-in-rhel-centos-and-fedora/ (delete current first)
# THAT COMPLAINS OFF MISSING DISPLAY..requires more investigation 

# MONETDB
cd /opt/sw
mkdir MonetDB
cd MonetDB/
hg clone http://dev.monetdb.org/hg/MonetDB MonetDBsrc
cd MonetDBsrc/
./bootstrap
cd ..
mkdir build
cd build/
../MonetDBsrc/configure --enable-geom --prefix=/opt/sw/MonetDB/install --disable-debug --enable-optimize --disable-assert --enable-bits=64 --disable-strict
make
make install
# Add to paths
# export PATH="$PATH:/opt/sw/MonetDB/install/bin"
# export PYTHONPATH="/opt/sw/MonetDB/install/lib/python2.7/site-packages:$PYTHONPATH"


############################################
#GIVE PERMISSION TO ACCESS ALL INSTALLED SW#
############################################
cd /opt/sw/
chown -R root:root *
chmod -R 755 *
# For the users that want to use all this software remember to add 
# source /opt/sw/export.sh
# in their .bashrc

#############################################
# Start PostgreSQL DB (create postgres user and start DB server)
useradd postgres
mkdir /data1/postgres
chown postgres:postgres /data1/postgres
su - postgres
/opt/sw/postgresql-9.4.1/build/bin/pg_ctl -D /data1/postgres initdb
/opt/sw/postgresql-9.4.1/build/bin/pg_ctl -D /data1/postgres -l /data1/postgres/postgresql.log start

# Start MonetDB
mkdir /data1/monetdb
chown -R oscarr:oscarr /data1/monetdb
su - oscarr
# create file ~/.monetdb for the user that will use MonetDB with
user=monetdb
password=monetdb
# Initialized the MonetDB
monetdbd create /home/oscar/MonetDB/dbfarm
monetdbd start /home/oscar/MonetDB/dbfarm